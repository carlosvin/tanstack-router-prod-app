/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BooksRouteImport } from './routes/books'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BooksBookIdRouteImport } from './routes/books.$bookId'

const BooksRoute = BooksRouteImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksBookIdRoute = BooksBookIdRouteImport.update({
  id: '/$bookId',
  path: '/$bookId',
  getParentRoute: () => BooksRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/books': typeof BooksRouteWithChildren
  '/books/$bookId': typeof BooksBookIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/books': typeof BooksRouteWithChildren
  '/books/$bookId': typeof BooksBookIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/books': typeof BooksRouteWithChildren
  '/books/$bookId': typeof BooksBookIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/books' | '/books/$bookId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/books' | '/books/$bookId'
  id: '__root__' | '/' | '/books' | '/books/$bookId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BooksRoute: typeof BooksRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/books': {
      id: '/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/$bookId': {
      id: '/books/$bookId'
      path: '/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof BooksBookIdRouteImport
      parentRoute: typeof BooksRoute
    }
  }
}

interface BooksRouteChildren {
  BooksBookIdRoute: typeof BooksBookIdRoute
}

const BooksRouteChildren: BooksRouteChildren = {
  BooksBookIdRoute: BooksBookIdRoute,
}

const BooksRouteWithChildren = BooksRoute._addFileChildren(BooksRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksRoute: BooksRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
